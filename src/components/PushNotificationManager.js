import React, { useEffect, useState } from 'react';
import { Alert, Platform } from 'react-native';
import messaging from '@react-native-firebase/messaging';
import AsyncStorage from '@react-native-async-storage/async-storage';
import firebase from '@react-native-firebase/app';

const PushNotificationManager = ({ children, onTokenReady, ref }) => {
  const [fcmToken, setFcmToken] = useState(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
  useEffect(() => {
    try {
      if (!firebase.apps.length) {
        console.log('üî• Initializing Firebase...');
        firebase.initializeApp();
        console.log('‚úÖ Firebase initialized successfully');
      } else {
        console.log('‚úÖ Firebase already initialized');
      }
    } catch (error) {
      console.error('‚ùå Error initializing Firebase:', error);
    }
  }, []);

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ ref
  useEffect(() => {
    if (ref) {
      ref.current = {
        initializePushNotifications: initializePushNotifications
      };
    }
  }, [ref]);

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const requestUserPermission = async () => {
    try {
      const authStatus = await messaging().requestPermission();
      const enabled =
        authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
        authStatus === messaging.AuthorizationStatus.PROVISIONAL;

      if (enabled) {
        console.log('Authorization status:', authStatus);
        return true;
      } else {
        console.log('Permission denied');
        return false;
      }
    } catch (error) {
      console.error('Error requesting permission:', error);
      return false;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞
  const getFCMToken = async () => {
    try {
      const token = await messaging().getToken();
      console.log('FCM Token:', token);
      setFcmToken(token);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ AsyncStorage
      await AsyncStorage.setItem('fcmToken', token);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await sendTokenToServer(token);
      
      return token;
    } catch (error) {
      console.error('Error getting FCM token:', error);
      return null;
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const sendTokenToServer = async (token) => {
    try {
      const response = await fetch('http://localhost:3000/api/fcm/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          token: token,
          platform: Platform.OS,
          userId: 'user123', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }),
      });

      if (response.ok) {
        console.log('FCM token sent to server successfully');
      } else {
        console.error('Failed to send FCM token to server');
      }
    } catch (error) {
      console.error('Error sending FCM token to server:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
  const onMessageReceived = async (remoteMessage) => {
    console.log('üì± Received background message:', remoteMessage);
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
  const onForegroundMessage = async (remoteMessage) => {
    console.log('üì± Received foreground message:', remoteMessage);
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const onNotificationOpenedApp = (remoteMessage) => {
    console.log('Notification opened app:', remoteMessage);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
  };

  // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–±—Ä–∞–Ω–∞ - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª
  const simulatePushNotification = () => {
    if (Platform.OS === 'ios' && __DEV__) {
      console.log('üß™ Push notification simulation disabled - use terminal for testing');
    }
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const [isInitialized, setIsInitialized] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
  const initializePushNotifications = async () => {
    try {
      console.log('üîî Initializing push notifications after login...');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      const hasPermission = await requestUserPermission();
      
      if (hasPermission) {
        console.log('‚úÖ FCM permission granted, initializing...');
        
        // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω
        const token = await getFCMToken();
        console.log('üîë FCM token obtained:', token);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º App.tsx –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
        if (onTokenReady) {
          onTokenReady(token);
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        const unsubscribeToken = messaging().onTokenRefresh(token => {
          console.log('üîÑ FCM token refreshed:', token);
          setFcmToken(token);
          AsyncStorage.setItem('fcmToken', token);
          sendTokenToServer(token);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º App.tsx –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
          if (onTokenReady) {
            onTokenReady(token);
          }
        });

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
        const unsubscribeBackground = messaging().onMessage(onMessageReceived);

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
        const unsubscribeForeground = messaging().onMessage(onForegroundMessage);

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const unsubscribeOpenedApp = messaging().onNotificationOpenedApp(onNotificationOpenedApp);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        messaging()
          .getInitialNotification()
          .then(remoteMessage => {
            if (remoteMessage) {
              console.log('üì± App opened from quit state:', remoteMessage);
            }
          });

        setIsInitialized(true);
        console.log('‚úÖ Push notifications initialized successfully');

        return () => {
          unsubscribeToken();
          unsubscribeBackground();
          unsubscribeForeground();
          unsubscribeOpenedApp();
        };
      } else {
        console.log('‚ùå FCM permission denied');
        Alert.alert(
          '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã',
          '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–∫–ª—é—á–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
          [
            { text: '–ü–æ–∑–∂–µ', style: 'cancel' },
            { 
              text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 
              onPress: () => {
                console.log('Open app settings');
              }
            }
          ]
        );
      }
    } catch (error) {
      console.error('‚ùå Error initializing push notifications:', error);
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ App.tsx
  useEffect(() => {
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    if (typeof window !== 'undefined') {
      window.initializePushNotifications = initializePushNotifications;
    }
  }, []);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    console.log('üöÄ PushNotificationManager mounted - waiting for login...');
  }, []);

  return children;
};

export default PushNotificationManager;
