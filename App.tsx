import React, { useEffect, useState, useRef } from 'react';
import { SafeAreaView, StyleSheet, View, ActivityIndicator, Alert, Platform } from 'react-native';
import { WebView } from 'react-native-webview';
import PushNotificationManager from './src/components/PushNotificationManager';

export default function App() {
    const [loading, setLoading] = useState(true);
    const [fcmToken, setFcmToken] = useState<string | null>(null);
    const [pushDialogShown, setPushDialogShown] = useState(false);
    const webviewRef = useRef<WebView>(null);
    const pushNotificationManagerRef = useRef<any>(null);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ FCM —Ç–æ–∫–µ–Ω–∞
    const handleTokenReady = (token: string) => {
        console.log('üéØ FCM token ready in App.tsx:', token);
        setFcmToken(token);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ WebView
        sendTokenToWebView(token);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FCM
    const callFCMInitialization = () => {
        console.log('üîî Calling real FCM initialization...');
        if (pushNotificationManagerRef.current && pushNotificationManagerRef.current.initializePushNotifications) {
            pushNotificationManagerRef.current.initializePushNotifications();
        } else {
            console.log('‚ùå FCM initialization function not found, using fallback...');
            // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ WebView
            if (webviewRef.current) {
                const script = `
                    if (window.initializePushNotifications) {
                        window.initializePushNotifications();
                    }
                `;
                webviewRef.current.injectJavaScript(script);
            }
        }
    };

    const sendTokenToWebView = (token: string) => {
        if (webviewRef.current) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth token –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º FCM —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
            const script = `
                (function() {
                    console.log('üîç Checking auth token for FCM registration...');
                    
                    // –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ localStorage (–∫–∞–∫ –≤ Android)
                    var debug = {
                        'origin': location.origin,
                        'url': location.href,
                        'auth-storage': localStorage.getItem('auth-storage'),
                        'token': localStorage.getItem('token'),
                        'authToken': localStorage.getItem('authToken'),
                        'accessToken': localStorage.getItem('accessToken'),
                        'session-token': sessionStorage.getItem('token'),
                        'all-keys': Object.keys(localStorage)
                    };
                    
                    console.log('=== FCM TOKEN CHECK DEBUG ===');
                    console.log('Origin:', debug.origin);
                    console.log('URL:', debug.url);
                    console.log('auth-storage:', debug['auth-storage']);
                    console.log('token:', debug['token']);
                    console.log('authToken:', debug['authToken']);
                    console.log('accessToken:', debug['accessToken']);
                    console.log('session-token:', debug['session-token']);
                    console.log('All localStorage keys:', debug['all-keys']);
                    
                    var authToken = null;
                    
                    // 1. –ü–æ–ø—Ä–æ–±—É–µ–º auth-storage (Zustand)
                    if (debug['auth-storage']) {
                        try {
                            var authData = JSON.parse(debug['auth-storage']);
                            // Zustand —Å persist —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ state
                            authToken = authData.state?.token || authData.token || null;
                            console.log('‚úÖ Token from Zustand storage:', authToken ? authToken.substring(0, 20) + '...' : 'null');
                        } catch (e) {
                            console.log('‚ùå Error parsing auth-storage:', e);
                        }
                    }
                    
                    // 2. Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º –∫–ª—é—á–∞–º
                    if (!authToken) {
                        authToken = debug['token'] || debug['authToken'] || debug['accessToken'] || debug['session-token'] || null;
                        console.log('‚úÖ Token from legacy storage:', authToken ? authToken.substring(0, 20) + '...' : 'null');
                    }
                    
                    if (authToken) {
                        console.log('üéØ Auth token found, length:', authToken.length);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞
                        var parts = authToken.split('.');
                        if (parts.length === 3) {
                            console.log('‚úÖ JWT token format looks valid (3 parts)');
                        } else {
                            console.log('‚ö†Ô∏è JWT token format invalid - expected 3 parts, got ' + parts.length);
                        }
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –≤ React Native
                        window.ReactNativeWebView.postMessage(JSON.stringify({
                            type: 'authAndFCMTokens',
                            authToken: authToken,
                            fcmToken: '${token}',
                            success: true
                        }));
                        
                        // –¢–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
                        if (window.receiveFCMToken) { 
                            window.receiveFCMToken('${token}', authToken); 
                        }
                    } else {
                        console.log('‚ùå No auth token found - user not logged in');
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
                        window.ReactNativeWebView.postMessage(JSON.stringify({
                            type: 'authAndFCMTokens',
                            authToken: null,
                            fcmToken: '${token}',
                            success: false,
                            error: 'No auth token found - user not logged in'
                        }));
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º FCM —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–∂–µ
                        if (window.receiveFCMToken) { 
                            window.receiveFCMToken('${token}', null); 
                        }
                    }
                })();
            `;
            webviewRef.current.injectJavaScript(script);
        }
    };

    const sendDataToWebView = (data: any) => {
        if (webviewRef.current) {
            const dataJson = JSON.stringify(data);
            const script = `if (window.receiveFCMData) { window.receiveFCMData(${dataJson}); }`;
            webviewRef.current.injectJavaScript(script);
        }
    };

    const sendTokensToServer = async (fcmToken: string, authToken: string) => {
        try {
            console.log('Sending tokens to server...');
            const response = await fetch('http://localhost:3000/api/fcm/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`,
                },
                body: JSON.stringify({
                    fcmToken: fcmToken,
                    platform: Platform.OS,
                    userId: 'user123', // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ auth token
                }),
            });

            if (response.ok) {
                console.log('Tokens sent to server successfully');
                const result = await response.json();
                console.log('Server response:', result);
            } else {
                console.error('Failed to send tokens to server:', response.status);
            }
        } catch (error) {
            console.error('Error sending tokens to server:', error);
        }
    };

    const onWebViewMessage = (event: any) => {
        try {
            const data = JSON.parse(event.nativeEvent.data);
            console.log('Message from WebView:', data);

            switch (data.type) {
                case 'getFCMToken':
                    if (fcmToken) {
                        sendTokenToWebView(fcmToken);
                    } else {
                        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                        console.log('FCM token not ready yet, will send when available');
                        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–¥–µ—Å—å
                    }
                    break;
                case 'authAndFCMTokens':
                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç WebView
                    const { authToken, fcmToken: webviewFcmToken, success, error } = data;
                    console.log('Received auth token:', authToken ? authToken.substring(0, 20) + '...' : 'null');
                    console.log('Received FCM token from WebView:', webviewFcmToken);
                    console.log('Success:', success);
                    console.log('Error:', error);
                    
                    if (success && authToken && webviewFcmToken) {
                        console.log('‚úÖ User is logged in, sending tokens to server...');
                        sendTokensToServer(webviewFcmToken, authToken);
                    } else {
                        console.log('‚ö†Ô∏è User not logged in, FCM token saved for later');
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º FCM —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
                        setFcmToken(webviewFcmToken);
                    }
                    break;
                case 'subscribeToTopic':
                    console.log('Subscribe to topic:', data.topic);
                    // TODO: Implement topic subscription
                    break;
                case 'unsubscribeFromTopic':
                    console.log('Unsubscribe from topic:', data.topic);
                    // TODO: Implement topic unsubscription
                    break;
                case 'sendTokenToServer':
                    if (fcmToken) {
                        console.log('Sending token to server:', fcmToken);
                        // TODO: Implement token sending
                    }
                    break;
                case 'userLoggedIn':
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π FCM —Ç–æ–∫–µ–Ω
                    const { authToken: loginAuthToken, success: loginSuccess } = data;
                    console.log('User logged in, auth token:', loginAuthToken ? loginAuthToken.substring(0, 20) + '...' : 'null');
                    
                    if (loginSuccess && loginAuthToken) {
                        console.log('‚úÖ User logged in, requesting push notification permission...');
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ WebView –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        if (webviewRef.current) {
                            const script = `
                                if (window.initializePushNotifications) {
                                    window.initializePushNotifications();
                                } else {
                                    console.log('Push notifications initialization function not found');
                                }
                            `;
                            webviewRef.current.injectJavaScript(script);
                        }
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                        if (fcmToken) {
                            console.log('‚úÖ User logged in, sending FCM token to server...');
                            sendTokensToServer(fcmToken, loginAuthToken);
                        }
                    }
                    break;
                case 'testPushNotification':
                    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
                    console.log('Testing push notification...');
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    Alert.alert(
                        '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                        '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–∏–º—É–ª—è—Ç–æ—Ä–∞',
                        [
                            { text: 'OK', onPress: () => console.log('Test notification OK pressed') }
                        ]
                    );
                    break;
                case 'initializePushNotifications':
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
                    console.log('üîî Initializing push notifications after login...');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –¥–∏–∞–ª–æ–≥
                    if (!pushDialogShown) {
                        setPushDialogShown(true);
                        
                        // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ PushNotificationManager
                        Alert.alert(
                            '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                            '–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?',
                            [
                                { text: '–ù–µ—Ç', style: 'cancel' },
                                { 
                                    text: '–î–∞', 
                                                                    onPress: () => {
                                    console.log('User agreed to push notifications');
                                    // –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é FCM
                                    callFCMInitialization();
                                }
                                }
                            ]
                        );
                    } else {
                        console.log('üîî Push notification dialog already shown, skipping...');
                    }
                    break;
                default:
                    console.log('Unknown message type:', data.type);
            }
        } catch (error) {
            console.error('Error parsing WebView message:', error);
        }
    };

    const injectedJavaScript = `
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è FCM
        window.receiveFCMToken = function(token, authToken) {
            console.log('FCM Token received from native:', token);
            console.log('Auth Token received from native:', authToken);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            if (window.fcmTokenCallback) {
                window.fcmTokenCallback(token, authToken);
            }
        };

        window.receiveFCMData = function(data) {
            console.log('FCM Data received from native:', data);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (window.fcmDataCallback) {
                window.fcmDataCallback(data);
            }
        };

        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        window.getFCMToken = function() {
            window.ReactNativeWebView.postMessage(JSON.stringify({
                type: 'getFCMToken'
            }));
        };

        window.subscribeToNotifications = function(topic) {
            window.ReactNativeWebView.postMessage(JSON.stringify({
                type: 'subscribeToTopic',
                topic: topic
            }));
        };

        window.unsubscribeFromNotifications = function(topic) {
            window.ReactNativeWebView.postMessage(JSON.stringify({
                type: 'unsubscribeFromTopic',
                topic: topic
            }));
        };

        window.sendTokenToServer = function() {
            window.ReactNativeWebView.postMessage(JSON.stringify({
                type: 'sendTokenToServer'
            }));
        };

        window.getAuthToken = function() {
            const authToken = localStorage.getItem('authToken') || localStorage.getItem('token') || localStorage.getItem('accessToken');
            console.log('Auth token from localStorage:', authToken);
            return authToken;
        };

        window.sendAuthAndFCMTokens = function(fcmToken) {
            const authToken = window.getAuthToken();
            window.ReactNativeWebView.postMessage(JSON.stringify({
                type: 'authAndFCMTokens',
                authToken: authToken,
                fcmToken: fcmToken
            }));
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
        window.testPushNotification = function() {
            window.ReactNativeWebView.postMessage(JSON.stringify({
                type: 'testPushNotification'
            }));
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
        window.initializePushNotifications = function() {
            console.log('üîî Initializing push notifications after login...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if (!window.pushNotificationsInitialized) {
                window.pushNotificationsInitialized = true;
                window.ReactNativeWebView.postMessage(JSON.stringify({
                    type: 'initializePushNotifications'
                }));
            } else {
                console.log('üîî Push notifications already initialized, skipping...');
            }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ (–∫–∞–∫ –≤ Android)
        window.checkTokenAfterLogin = function() {
            console.log('üîç Checking token after login...');
            
            // –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ localStorage
            var debug = {
                'origin': location.origin,
                'url': location.href,
                'auth-storage': localStorage.getItem('auth-storage'),
                'token': localStorage.getItem('token'),
                'authToken': localStorage.getItem('authToken'),
                'accessToken': localStorage.getItem('accessToken'),
                'session-token': sessionStorage.getItem('token'),
                'all-keys': Object.keys(localStorage)
            };
            
            console.log('=== LOGIN CHECK DEBUG ===');
            console.log('Origin:', debug.origin);
            console.log('URL:', debug.url);
            console.log('auth-storage:', debug['auth-storage']);
            console.log('token:', debug['token']);
            console.log('authToken:', debug['authToken']);
            console.log('accessToken:', debug['accessToken']);
            console.log('session-token:', debug['session-token']);
            console.log('All localStorage keys:', debug['all-keys']);
            
            var authToken = null;
            
            // 1. –ü–æ–ø—Ä–æ–±—É–µ–º auth-storage (Zustand)
            if (debug['auth-storage']) {
                try {
                    var authData = JSON.parse(debug['auth-storage']);
                    authToken = authData.state?.token || authData.token || null;
                    console.log('‚úÖ Token from Zustand storage:', authToken ? authToken.substring(0, 20) + '...' : 'null');
                } catch (e) {
                    console.log('‚ùå Error parsing auth-storage:', e);
                }
            }
            
            // 2. Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º –∫–ª—é—á–∞–º
            if (!authToken) {
                authToken = debug['token'] || debug['authToken'] || debug['accessToken'] || debug['session-token'] || null;
                console.log('‚úÖ Token from legacy storage:', authToken ? authToken.substring(0, 20) + '...' : 'null');
            }
            
            if (authToken) {
                console.log('üéØ Auth token found after login, length:', authToken.length);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ React Native
                window.ReactNativeWebView.postMessage(JSON.stringify({
                    type: 'userLoggedIn',
                    authToken: authToken,
                    success: true
                }));
            } else {
                console.log('‚ùå No auth token found after login');
                window.ReactNativeWebView.postMessage(JSON.stringify({
                    type: 'userLoggedIn',
                    authToken: null,
                    success: false,
                    error: 'No auth token found after login'
                }));
            }
        };

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setTimeout(() => {
            console.log('Requesting FCM token...');
            window.getFCMToken();
        }, 1000);

        // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        var delays = [3000, 5000, 8000, 12000, 15000]; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 3, 5, 8, 12, 15 —Å–µ–∫—É–Ω–¥
        delays.forEach((delay) => {
            setTimeout(() => {
                if (!window.loginDetected) {
                    var token = localStorage.getItem('auth-storage') || 
                               localStorage.getItem('token') || 
                               localStorage.getItem('authToken') || 
                               localStorage.getItem('accessToken') ||
                               sessionStorage.getItem('token');
                    
                    if (token) {
                        console.log('üîç Delayed check (' + delay + 'ms) found token:', token.substring(0, 20) + '...');
                        window.loginDetected = true;
                        window.checkTokenAfterLogin();
                    }
                }
            }, delay);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
        if (window.location.hostname === 'localhost' || window.location.hostname.includes('vercel.app')) {
            setTimeout(() => {
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                var testButton = document.createElement('button');
                testButton.textContent = 'üß™ Test Push Notification';
                testButton.style.cssText = 'position: fixed; top: 10px; right: 10px; z-index: 9999; background: #007aff; color: white; border: none; padding: 10px; border-radius: 5px; font-size: 12px;';
                testButton.onclick = function() {
                    window.testPushNotification();
                };
                document.body.appendChild(testButton);
                
                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞
                var loginTestButton = document.createElement('button');
                loginTestButton.textContent = 'üîê Test Login Detection';
                loginTestButton.style.cssText = 'position: fixed; top: 50px; right: 10px; z-index: 9999; background: #ff6b35; color: white; border: none; padding: 10px; border-radius: 5px; font-size: 12px;';
                loginTestButton.onclick = function() {
                    console.log('üîê Manual login test triggered');
                    window.checkTokenAfterLogin();
                };
                document.body.appendChild(loginTestButton);
                
                console.log('Test buttons added to page');
            }, 2000);
        }

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π localStorage –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞
        var originalSetItem = localStorage.setItem;
        localStorage.setItem = function(key, value) {
            originalSetItem.apply(this, arguments);
            
            console.log('üîç localStorage.setItem called:', key, value ? value.substring(0, 50) + '...' : 'null');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ auth token
            if (key === 'auth-storage' || key === 'token' || key === 'authToken' || key === 'accessToken') {
                console.log('üîç Auth-related localStorage changed:', key, value ? value.substring(0, 20) + '...' : 'null');
                
                // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
                setTimeout(() => {
                    window.checkTokenAfterLogin();
                }, 500);
            }
        };

        // –¢–∞–∫–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º sessionStorage
        var originalSessionSetItem = sessionStorage.setItem;
        sessionStorage.setItem = function(key, value) {
            originalSessionSetItem.apply(this, arguments);
            
            console.log('üîç sessionStorage.setItem called:', key, value ? value.substring(0, 50) + '...' : 'null');
            
            if (key === 'token' || key === 'authToken' || key === 'accessToken') {
                console.log('üîç Auth-related sessionStorage changed:', key, value ? value.substring(0, 20) + '...' : 'null');
                
                setTimeout(() => {
                    window.checkTokenAfterLogin();
                }, 500);
            }
        };

        // 1. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥)
        var checkInterval = setInterval(() => {
            var currentToken = localStorage.getItem('auth-storage') || 
                              localStorage.getItem('token') || 
                              localStorage.getItem('authToken') || 
                              localStorage.getItem('accessToken') ||
                              sessionStorage.getItem('token');
            
            if (currentToken && !window.loginDetected) {
                console.log('üîç Periodic check found token:', currentToken.substring(0, 20) + '...');
                window.loginDetected = true;
                window.checkTokenAfterLogin();
            }
        }, 2000);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            clearInterval(checkInterval);
            console.log('‚è∞ Stopped periodic token checking');
        }, 60000);

        // 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π DOM –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        var observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö DOM
                if (!window.loginDetected) {
                    setTimeout(() => {
                        var token = localStorage.getItem('auth-storage') || 
                                   localStorage.getItem('token') || 
                                   localStorage.getItem('authToken');
                        if (token) {
                            console.log('üîç DOM mutation detected token:', token.substring(0, 20) + '...');
                            window.loginDetected = true;
                            window.checkTokenAfterLogin();
                        }
                    }, 100);
                }
            });
        });

        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true
        });

        // 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Enter –≤ —Ñ–æ—Ä–º–∞—Ö –ª–æ–≥–∏–Ω–∞)
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Enter' && !window.loginDetected) {
                setTimeout(() => {
                    var token = localStorage.getItem('auth-storage') || 
                               localStorage.getItem('token') || 
                               localStorage.getItem('authToken');
                    if (token) {
                        console.log('üîç Enter key detected token:', token.substring(0, 20) + '...');
                        window.loginDetected = true;
                        window.checkTokenAfterLogin();
                    }
                }, 1000);
            }
        });

        // 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π click (–∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω–∞)
        document.addEventListener('click', function(event) {
            if (!window.loginDetected) {
                setTimeout(() => {
                    var token = localStorage.getItem('auth-storage') || 
                               localStorage.getItem('token') || 
                               localStorage.getItem('authToken');
                    if (token) {
                        console.log('üîç Click event detected token:', token.substring(0, 20) + '...');
                        window.loginDetected = true;
                        window.checkTokenAfterLogin();
                    }
                }, 1500);
            }
        });

        // 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π focus/blur –Ω–∞ input –ø–æ–ª—è—Ö
        document.addEventListener('focus', function(event) {
            if (event.target.type === 'password' || event.target.type === 'email') {
                setTimeout(() => {
                    if (!window.loginDetected) {
                        var token = localStorage.getItem('auth-storage') || 
                                   localStorage.getItem('token') || 
                                   localStorage.getItem('authToken');
                        if (token) {
                            console.log('üîç Input focus detected token:', token.substring(0, 20) + '...');
                            window.loginDetected = true;
                            window.checkTokenAfterLogin();
                        }
                    }
                }, 500);
            }
        }, true);

        // 6. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π URL (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SPA —Ä–æ—É—Ç–∏–Ω–≥)
        var currentURL = window.location.href;
        setInterval(() => {
            if (window.location.href !== currentURL) {
                currentURL = window.location.href;
                console.log('üîç URL changed to:', currentURL);
                
                setTimeout(() => {
                    if (!window.loginDetected) {
                        var token = localStorage.getItem('auth-storage') || 
                                   localStorage.getItem('token') || 
                                   localStorage.getItem('authToken');
                        if (token) {
                            console.log('üîç URL change detected token:', token.substring(0, 20) + '...');
                            window.loginDetected = true;
                            window.checkTokenAfterLogin();
                        }
                    }
                }, 1000);
            }
        }, 1000);

        true;
    `;

        return (
        <PushNotificationManager 
            onTokenReady={handleTokenReady}
            ref={pushNotificationManagerRef}
        >
            <SafeAreaView style={{ flex: 1 }}>
            {loading && (
                <View style={styles.loading}>
                    <ActivityIndicator size="large" color="#007aff" />
                </View>
            )}
            <WebView
                ref={webviewRef}
                    source={{ uri: 'https://kcell-service.vercel.app' }}
                onLoadEnd={() => setLoading(false)}
                startInLoadingState={true}
                javaScriptEnabled={true}
                domStorageEnabled={true}
                    onMessage={onWebViewMessage}
                    injectedJavaScript={injectedJavaScript}
                    allowsInlineMediaPlayback={true}
                    mediaPlaybackRequiresUserAction={false}
            />
        </SafeAreaView>
        </PushNotificationManager>
    );
}

const styles = StyleSheet.create({
    loading: {
        position: 'absolute',
        top: 0, left: 0, right: 0, bottom: 0,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'white',
        zIndex: 1,
    }
});
